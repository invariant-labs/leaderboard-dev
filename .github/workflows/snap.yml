name: "Create snapshot of points"
on:
  # schedule:
  #   - cron: "*/5 * * * *" # every 5 minutes
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

env:
  solana_version: 1.18.18

jobs:
  points-snap:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
          fetch-depth: 0

      - name: Check Initial LFS Storage
        run: |
          git lfs install
          echo "Initial LFS storage usage (mainnet files only):"
          git lfs ls-files -l | grep "_mainnet.json" | awk '{total += $4} END {print total/1024/1024 " MB"}'

      - uses: actions/setup-node@v2
        with:
          node-version: "16"

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true

      - name: install global mocha
        run: |
          export PATH="/home/runner/.local/share/solana/install/active_release/bin:$PATH"
          npm install -g mocha
          npm install -g ts-mocha
          npm install -g typescript
          npm install -g @project-serum/anchor
          ts-mocha -h

      - name: install essential
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config build-essential libudev-dev

      - name: install solana
        run: |
          sh -c "$(curl -sSfL https://release.anza.xyz/v${{ env.solana_version }}/install)"
          echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
          export PATH="/home/runner/.local/share/solana/install/active_release/bin:$PATH"
          solana --version

      - name: setup solana
        run: |
          export PATH="/home/runner/.local/share/solana/install/active_release/bin:$PATH"
          solana --version
          solana-keygen new -o "$HOME/.config/solana/id.json" --no-passphrase --silent

      - name: snapshot
        run: |
          export PATH="/home/runner/.local/share/solana/install/active_release/bin:$PATH"
          export ANCHOR_WALLET="/home/runner/.config/solana/id.json"
          npm install
          npm run snap

      - uses: actions/upload-artifact@v4
        with:
          name: eclipse-points-snapshot-${{ github.run_id }}
          path: |
            ./data/*.json

  deploy:
    needs: [points-snap]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
          fetch-depth: 0

      - name: Configure Git LFS
        run: |
          git lfs install
          git lfs pull
          # Configure LFS to track only mainnet files
          git lfs track "data/*_mainnet.json"
          echo "Current LFS storage before deployment (mainnet files only):"
          git lfs ls-files -l | grep "_mainnet.json" | awk '{total += $4} END {print total/1024/1024 " MB"}'

      - name: Download snapshot
        uses: actions/download-artifact@v4
        with:
          name: eclipse-points-snapshot-${{ github.run_id }}
          path: ./data/
        continue-on-error: true

      - name: Clean old mainnet snapshots
        run: |
          # Remove all mainnet JSON files except the most recent ones
          cd ./data
          for prefix in $(ls *_mainnet.json | sed 's/_mainnet.json//' | sort -u); do
            ls -t ${prefix}_mainnet.json | tail -n +2 | xargs rm -f
          done
          cd ..

      - name: Commit and Push Changes
        run: |
          git config --global user.email stats@invariant.app
          git config --global user.name invariantStats

          # Ensure only mainnet files are tracked by LFS
          git lfs track "data/*_mainnet.json"
          git add .gitattributes

          # Add all files (LFS will handle mainnet files automatically)
          git add ./data/

          git commit -m "Snapshot of points done!"

          # Push LFS objects first
          git lfs push origin master --all

          # Then push the regular files
          git push origin master --force
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check Final LFS Storage
        run: |
          echo "Final LFS storage usage after deployment (mainnet files only):"
          git lfs ls-files -l | grep "_mainnet.json" | awk '{total += $4} END {print total/1024/1024 " MB"}'

      - uses: actions/setup-node@v2
        with:
          node-version: "16"

      - name: Deploy to Production
        uses: amondnet/vercel-action@v20
        id: deploy-vercel-production
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: "--prod"
          scope: ${{ secrets.VERCEL_ORG_ID }}
